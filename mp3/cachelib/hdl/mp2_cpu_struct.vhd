-- VHDL Entity cachelib.mp2_CPU.symbol
--
-- Created:
--          by - freed2.ews (gelib-057-16.ews.illinois.edu)
--          at - 14:52:37 03/31/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY cachelib;
USE cachelib.LC3b_types.all;

ENTITY mp2_CPU IS
   PORT( 
      RESET_L : IN     std_logic;
      START_H : IN     std_logic
   );

-- Declarations

END mp2_CPU ;

--
-- VHDL Architecture cachelib.mp2_CPU.struct
--
-- Created:
--          by - freed2.ews (gelib-057-16.ews.illinois.edu)
--          at - 14:52:37 03/31/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY cachelib;
USE cachelib.LC3b_types.all;


ARCHITECTURE struct OF mp2_CPU IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ADDRESS        : LC3b_word;
   SIGNAL ADJ6MuxSel     : std_logic;
   SIGNAL ALUMuxSel      : std_logic;
   SIGNAL ALUop          : LC3b_aluop;
   SIGNAL ANDMuxSel      : std_logic;
   SIGNAL BIT0           : std_logic;
   SIGNAL BusMuxSel      : std_logic;
   SIGNAL CheckN         : std_logic;
   SIGNAL CheckP         : std_logic;
   SIGNAL CheckZ         : std_logic;
   SIGNAL DATAIN         : LC3b_word;
   SIGNAL DATAOUT        : LC3b_word;
   SIGNAL DestMuxSel     : std_logic;
   SIGNAL IndirectMuxSel : std_logic;
   SIGNAL JMPMuxSel      : std_logic;
   SIGNAL LEAMuxSel      : std_logic;
   SIGNAL LoadIR         : std_logic;
   SIGNAL LoadMAR        : std_logic;
   SIGNAL LoadMDR        : std_logic;
   SIGNAL LoadNZP        : std_logic;
   SIGNAL LoadPC         : std_logic;
   SIGNAL MARMuxSel      : std_logic;
   SIGNAL MDRMuxSel      : std_logic;
   SIGNAL MREAD_L        : std_logic;
   SIGNAL MRESP_H        : std_logic;
   SIGNAL MWRITEH_L      : std_logic;
   SIGNAL MWRITEL_L      : std_logic;
   SIGNAL Opcode         : LC3B_OPCODE;
   SIGNAL PCMuxSel       : LC3B_4MUX_SEL;
   SIGNAL PCStoreMuxSel  : std_logic;
   SIGNAL RFMuxSel       : LC3B_4MUX_SEL;
   SIGNAL RegWrite       : std_logic;
   SIGNAL STBMuxSel      : std_logic;
   SIGNAL StoreSR        : std_logic;
   SIGNAL TRAPMuxSel     : std_logic;
   SIGNAL adj11sel       : std_logic;
   SIGNAL clk            : std_logic := '0';
   SIGNAL n              : std_logic;
   SIGNAL p              : std_logic;
   SIGNAL z              : std_logic;


   -- Component Declarations
   COMPONENT CLKgen
   PORT (
      clk : INOUT  std_logic  := '0'
   );
   END COMPONENT;
   COMPONENT Control
   PORT (
      BIT0           : IN     std_logic ;
      CheckN         : IN     std_logic ;
      CheckP         : IN     std_logic ;
      CheckZ         : IN     std_logic ;
      MRESP_H        : IN     std_logic ;
      Opcode         : IN     LC3B_OPCODE ;
      RESET_L        : IN     std_logic ;
      START_H        : IN     std_logic ;
      clk            : IN     std_logic ;
      n              : IN     std_logic ;
      p              : IN     std_logic ;
      z              : IN     std_logic ;
      ADJ6MuxSel     : OUT    std_logic ;
      ALUMuxSel      : OUT    std_logic ;
      ALUop          : OUT    LC3b_aluop ;
      ANDMuxSel      : OUT    std_logic ;
      BusMuxSel      : OUT    std_logic ;
      DestMuxSel     : OUT    std_logic ;
      IndirectMuxSel : OUT    std_logic ;
      JMPMuxSel      : OUT    std_logic ;
      LEAMuxSel      : OUT    std_logic ;
      LoadIR         : OUT    std_logic ;
      LoadMAR        : OUT    std_logic ;
      LoadMDR        : OUT    std_logic ;
      LoadNZP        : OUT    std_logic ;
      LoadPC         : OUT    std_logic ;
      MARMuxSel      : OUT    std_logic ;
      MDRMuxSel      : OUT    std_logic ;
      MREAD_L        : OUT    std_logic ;
      MWRITEH_L      : OUT    std_logic ;
      MWRITEL_L      : OUT    std_logic ;
      PCMuxSel       : OUT    LC3B_4MUX_SEL ;
      PCStoreMuxSel  : OUT    std_logic ;
      RFMuxSel       : OUT    LC3B_4MUX_SEL ;
      RegWrite       : OUT    std_logic ;
      STBMuxSel      : OUT    std_logic ;
      StoreSR        : OUT    std_logic ;
      TRAPMuxSel     : OUT    std_logic ;
      adj11sel       : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Datapath
   PORT (
      ADJ6MuxSel     : IN     std_logic ;
      ALUMuxSel      : IN     std_logic ;
      ALUop          : IN     LC3b_aluop ;
      ANDMuxSel      : IN     std_logic ;
      BusMuxSel      : IN     std_logic ;
      DATAIN         : IN     LC3b_word ;
      DestMuxSel     : IN     std_logic ;
      IndirectMuxSel : IN     std_logic ;
      JMPMuxSel      : IN     std_logic ;
      LEAMuxSel      : IN     std_logic ;
      LoadIR         : IN     std_logic ;
      LoadMAR        : IN     std_logic ;
      LoadMDR        : IN     std_logic ;
      LoadNZP        : IN     std_logic ;
      LoadPC         : IN     std_logic ;
      MARMuxSel      : IN     std_logic ;
      MDRMuxSel      : IN     std_logic ;
      PCMuxSel       : IN     LC3B_4MUX_SEL ;
      PCStoreMuxSel  : IN     std_logic ;
      RESET_L        : IN     std_logic ;
      RFMuxSel       : IN     LC3B_4MUX_SEL ;
      RegWrite       : IN     std_logic ;
      STBMuxSel      : IN     std_logic ;
      StoreSR        : IN     std_logic ;
      TRAPMuxSel     : IN     std_logic ;
      adj11sel       : IN     std_logic ;
      clk            : IN     std_logic ;
      ADDRESS        : OUT    LC3b_word ;
      BIT0           : OUT    std_logic ;
      CheckN         : OUT    std_logic ;
      CheckP         : OUT    std_logic ;
      CheckZ         : OUT    std_logic ;
      DATAOUT        : OUT    LC3b_word ;
      Opcode         : OUT    LC3B_OPCODE ;
      n              : OUT    std_logic ;
      p              : OUT    std_logic ;
      z              : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Memory
   PORT (
      ADDRESS   : IN     LC3b_word ;
      DATAOUT   : IN     LC3b_word ;
      MREAD_L   : IN     std_logic ;
      MWRITEH_L : IN     std_logic ;
      MWRITEL_L : IN     std_logic ;
      RESET_L   : IN     std_logic ;
      clk       : IN     std_logic ;
      DATAIN    : OUT    LC3b_word ;
      MRESP_H   : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : CLKgen USE ENTITY cachelib.CLKgen;
   FOR ALL : Control USE ENTITY cachelib.Control;
   FOR ALL : Datapath USE ENTITY cachelib.Datapath;
   FOR ALL : Memory USE ENTITY cachelib.Memory;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   I0 : CLKgen
      PORT MAP (
         clk => clk
      );
   ControlUnit : Control
      PORT MAP (
         BIT0           => BIT0,
         CheckN         => CheckN,
         CheckP         => CheckP,
         CheckZ         => CheckZ,
         MRESP_H        => MRESP_H,
         Opcode         => Opcode,
         RESET_L        => RESET_L,
         START_H        => START_H,
         clk            => clk,
         n              => n,
         p              => p,
         z              => z,
         ADJ6MuxSel     => ADJ6MuxSel,
         ALUMuxSel      => ALUMuxSel,
         ALUop          => ALUop,
         ANDMuxSel      => ANDMuxSel,
         BusMuxSel      => BusMuxSel,
         DestMuxSel     => DestMuxSel,
         IndirectMuxSel => IndirectMuxSel,
         JMPMuxSel      => JMPMuxSel,
         LEAMuxSel      => LEAMuxSel,
         LoadIR         => LoadIR,
         LoadMAR        => LoadMAR,
         LoadMDR        => LoadMDR,
         LoadNZP        => LoadNZP,
         LoadPC         => LoadPC,
         MARMuxSel      => MARMuxSel,
         MDRMuxSel      => MDRMuxSel,
         MREAD_L        => MREAD_L,
         MWRITEH_L      => MWRITEH_L,
         MWRITEL_L      => MWRITEL_L,
         PCMuxSel       => PCMuxSel,
         PCStoreMuxSel  => PCStoreMuxSel,
         RFMuxSel       => RFMuxSel,
         RegWrite       => RegWrite,
         STBMuxSel      => STBMuxSel,
         StoreSR        => StoreSR,
         TRAPMuxSel     => TRAPMuxSel,
         adj11sel       => adj11sel
      );
   theDatapath : Datapath
      PORT MAP (
         ADJ6MuxSel     => ADJ6MuxSel,
         ALUMuxSel      => ALUMuxSel,
         ALUop          => ALUop,
         ANDMuxSel      => ANDMuxSel,
         BusMuxSel      => BusMuxSel,
         DATAIN         => DATAIN,
         DestMuxSel     => DestMuxSel,
         IndirectMuxSel => IndirectMuxSel,
         JMPMuxSel      => JMPMuxSel,
         LEAMuxSel      => LEAMuxSel,
         LoadIR         => LoadIR,
         LoadMAR        => LoadMAR,
         LoadMDR        => LoadMDR,
         LoadNZP        => LoadNZP,
         LoadPC         => LoadPC,
         MARMuxSel      => MARMuxSel,
         MDRMuxSel      => MDRMuxSel,
         PCMuxSel       => PCMuxSel,
         PCStoreMuxSel  => PCStoreMuxSel,
         RESET_L        => RESET_L,
         RFMuxSel       => RFMuxSel,
         RegWrite       => RegWrite,
         STBMuxSel      => STBMuxSel,
         StoreSR        => StoreSR,
         TRAPMuxSel     => TRAPMuxSel,
         adj11sel       => adj11sel,
         clk            => clk,
         ADDRESS        => ADDRESS,
         BIT0           => BIT0,
         CheckN         => CheckN,
         CheckP         => CheckP,
         CheckZ         => CheckZ,
         DATAOUT        => DATAOUT,
         Opcode         => Opcode,
         n              => n,
         p              => p,
         z              => z
      );
   DRAM : Memory
      PORT MAP (
         ADDRESS   => ADDRESS,
         DATAOUT   => DATAOUT,
         MREAD_L   => MREAD_L,
         MWRITEH_L => MWRITEH_L,
         MWRITEL_L => MWRITEL_L,
         RESET_L   => RESET_L,
         clk       => clk,
         DATAIN    => DATAIN,
         MRESP_H   => MRESP_H
      );

END struct;

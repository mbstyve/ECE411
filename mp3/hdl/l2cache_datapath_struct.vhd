-- VHDL Entity ece411.L2Cache_DataPath.symbol
--
-- Created:
--          by - draguna1.ews (gelib-057-08.ews.illinois.edu)
--          at - 01:48:05 04/30/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all; 
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY L2Cache_DataPath IS
   PORT( 
      Address        : IN     lc3b_word;
      CheckHitState  : IN     std_logic;
      L2WriteData    : IN     LC3b_oword;
      MRead_L        : IN     std_logic;
      MWrite_L       : IN     std_logic;
      PMReadData     : IN     LC3b_oword;
      PMReadState    : IN     std_logic;
      PMResp_H       : IN     std_logic;
      RESET_L        : IN     std_logic;
      WaitHitState   : IN     std_logic;
      WriteBackState : IN     std_logic;
      clk            : IN     std_logic;
      CacheAccess    : OUT    std_logic;
      Dirty          : OUT    std_logic;
      Hit            : OUT    std_logic;
      L2ReadData     : OUT    LC3b_oword;
      MResp_H        : OUT    std_logic;
      Miss           : OUT    std_logic;
      PMAddress      : OUT    LC3b_word;
      PMWriteData    : OUT    LC3b_oword;
      toPMRead       : OUT    std_logic;
      toWB           : OUT    std_logic
   );

-- Declarations

END L2Cache_DataPath ;

--
-- VHDL Architecture ece411.L2Cache_DataPath.struct
--
-- Created:
--          by - draguna1.ews (gelib-057-08.ews.illinois.edu)
--          at - 01:48:06 04/30/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all; 
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY mp3lib;

ARCHITECTURE struct OF L2Cache_DataPath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL Clean           : STD_LOGIC;
   SIGNAL Dirty0          : std_logic;
   SIGNAL Dirty1          : std_logic;
   SIGNAL Dirty2          : std_logic;
   SIGNAL Dirty3          : std_logic;
   SIGNAL Dirty4          : std_logic;
   SIGNAL Dirty5          : std_logic;
   SIGNAL Dirty6          : std_logic;
   SIGNAL Dirty7          : std_logic;
   SIGNAL F               : std_logic;
   SIGNAL F1              : std_logic;
   SIGNAL F10             : STD_LOGIC;
   SIGNAL F11             : STD_LOGIC;
   SIGNAL F2              : std_logic;
   SIGNAL F3              : std_logic;
   SIGNAL F4              : std_logic;
   SIGNAL F5              : std_logic;
   SIGNAL F6              : std_logic;
   SIGNAL F7              : std_logic;
   SIGNAL F8              : std_logic;
   SIGNAL F9              : std_logic;
   SIGNAL Hit0            : std_logic;
   SIGNAL Hit1            : std_logic;
   SIGNAL Hit3            : std_logic;
   SIGNAL Hit4            : std_logic;
   SIGNAL Hit5            : std_logic;
   SIGNAL Hit6            : std_logic;
   SIGNAL Hit7            : std_logic;
   SIGNAL HitUnion        : std_logic;
   SIGNAL Index           : LC3b_L2_index;
   SIGNAL LineOut         : LC3b_oword;
   SIGNAL LineOut1        : LC3b_oword;
   SIGNAL LineOut2        : LC3b_oword;
   SIGNAL LineOut3        : LC3b_oword;
   SIGNAL LineOut4        : LC3b_oword;
   SIGNAL LineOut5        : LC3b_oword;
   SIGNAL LineOut6        : LC3b_oword;
   SIGNAL LineOut7        : LC3b_oword;
   SIGNAL OWORDOUT        : LC3B_OWORD;
   SIGNAL OriginalAddress : LC3b_word;
   SIGNAL Output          : std_logic;
   SIGNAL PickWay0        : std_logic;
   SIGNAL PickWay1        : std_logic;
   SIGNAL PickWay2        : std_logic;
   SIGNAL PickWay3        : std_logic;
   SIGNAL PickWay4        : std_logic;
   SIGNAL PickWay5        : std_logic;
   SIGNAL PickWay6        : std_logic;
   SIGNAL PickWay7        : std_logic;
   SIGNAL StoreAddr       : LC3b_word;
   SIGNAL StoreAddr1      : LC3b_word;
   SIGNAL StoreAddr2      : LC3b_word;
   SIGNAL StoreAddr3      : LC3b_word;
   SIGNAL StoreAddr4      : LC3b_word;
   SIGNAL StoreAddr5      : LC3b_word;
   SIGNAL StoreAddr6      : LC3b_word;
   SIGNAL StoreAddr7      : LC3b_word;
   SIGNAL Tag             : LC3b_L2_tag;
   SIGNAL Way0Selected    : std_logic;
   SIGNAL WriteCache      : std_logic;
   SIGNAL WriteRequest    : STD_LOGIC;
   SIGNAL WriteWindow     : std_logic;
   SIGNAL bitout          : std_logic;
   SIGNAL bitout1         : std_logic;
   SIGNAL bitout2         : std_logic;
   SIGNAL bitout3         : std_logic;
   SIGNAL bitout4         : std_logic;
   SIGNAL bitout5         : std_logic;
   SIGNAL bitout6         : std_logic;
   SIGNAL clkDelay22      : std_logic;
   SIGNAL clkDelay33      : std_logic;
   SIGNAL hit2            : std_logic;

   -- Implicit buffer signal declarations
   SIGNAL CacheAccess_internal : std_logic;
   SIGNAL Dirty_internal       : std_logic;
   SIGNAL Hit_internal         : std_logic;
   SIGNAL Miss_internal        : std_logic;


   -- Component Declarations
   COMPONENT AND2
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT AND3Bit
   PORT (
      A      : IN     std_logic ;
      B      : IN     std_logic ;
      C      : IN     std_logic ;
      Output : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT AND4
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      C : IN     std_logic ;
      D : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT ClockDelay22
   PORT (
      clk        : IN     std_logic ;
      clkDelay22 : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT ClockDelay33
   PORT (
      clk        : IN     std_logic ;
      clkDelay33 : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT L2AddrSplit
   PORT (
      Address : IN     LC3b_word ;
      Index   : OUT    LC3b_L2_index ;
      Tag     : OUT    LC3b_L2_tag 
   );
   END COMPONENT;
   COMPONENT L2Mux
   PORT (
      In0    : IN     std_logic ;
      In1    : IN     std_logic ;
      In2    : IN     std_logic ;
      In3    : IN     std_logic ;
      In4    : IN     std_logic ;
      In5    : IN     std_logic ;
      In6    : IN     std_logic ;
      In7    : IN     std_logic ;
      P0     : IN     std_logic ;
      P1     : IN     std_logic ;
      P2     : IN     std_logic ;
      P3     : IN     std_logic ;
      P4     : IN     std_logic ;
      P5     : IN     std_logic ;
      P6     : IN     std_logic ;
      P7     : IN     std_logic ;
      Output : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT L2Mux_128
   PORT (
      In0    : IN     lc3b_oword ;
      In1    : IN     lc3b_oword ;
      In2    : IN     lc3b_oword ;
      In3    : IN     lc3b_oword ;
      In4    : IN     lc3b_oword ;
      In5    : IN     lc3b_oword ;
      In6    : IN     lc3b_oword ;
      In7    : IN     lc3b_oword ;
      s0     : IN     std_logic ;
      s1     : IN     std_logic ;
      s2     : IN     std_logic ;
      s3     : IN     std_logic ;
      s4     : IN     std_logic ;
      s5     : IN     std_logic ;
      s6     : IN     std_logic ;
      s7     : IN     std_logic ;
      Output : OUT    lc3b_oword 
   );
   END COMPONENT;
   COMPONENT L2Mux_16
   PORT (
      In0    : IN     LC3b_word ;
      In1    : IN     LC3b_word ;
      In2    : IN     LC3b_word ;
      In3    : IN     LC3b_word ;
      In4    : IN     LC3b_word ;
      In5    : IN     LC3b_word ;
      In6    : IN     LC3b_word ;
      In7    : IN     LC3b_word ;
      S0     : IN     std_logic ;
      S1     : IN     std_logic ;
      S2     : IN     std_logic ;
      S3     : IN     std_logic ;
      S4     : IN     std_logic ;
      S5     : IN     std_logic ;
      S6     : IN     std_logic ;
      S7     : IN     std_logic ;
      Output : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT L2_LRU
   PORT (
      Addr_Index : IN     LC3b_c_Index ;
      Hit0       : IN     std_logic ;
      Hit1       : IN     std_logic ;
      Hit2       : IN     std_logic ;
      Hit3       : IN     std_logic ;
      Hit4       : IN     std_logic ;
      Hit5       : IN     std_logic ;
      Hit6       : IN     std_logic ;
      Hit7       : IN     std_logic ;
      LRUWrite   : IN     std_logic ;
      RESET_L    : IN     std_logic ;
      PickWay0   : OUT    std_logic ;
      PickWay1   : OUT    std_logic ;
      PickWay2   : OUT    std_logic ;
      PickWay3   : OUT    std_logic ;
      PickWay4   : OUT    std_logic ;
      PickWay5   : OUT    std_logic ;
      PickWay6   : OUT    std_logic ;
      PickWay7   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT L2_Way_8
   PORT (
      DataIn    : IN     LC3b_oword ;
      DataWrite : IN     std_logic ;
      Dirtify   : IN     std_logic ;
      Index     : IN     LC3b_L2_index ;
      RESET_L   : IN     std_logic ;
      Tag       : IN     LC3b_L2_tag ;
      Dirty     : OUT    std_logic ;
      Hit       : OUT    std_logic ;
      LineOut   : OUT    LC3b_oword ;
      StoreAddr : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT NAND2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT OR2
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT OWordMux2
   PORT (
      A        : IN     LC3B_OWORD ;
      B        : IN     LC3B_OWORD ;
      SEL      : IN     std_logic ;
      OWORDOUT : OUT    LC3B_OWORD 
   );
   END COMPONENT;
   COMPONENT Or8
   PORT (
      In0 : IN     std_logic ;
      In1 : IN     std_logic ;
      In2 : IN     std_logic ;
      In3 : IN     std_logic ;
      In4 : IN     std_logic ;
      In5 : IN     std_logic ;
      In6 : IN     std_logic ;
      In7 : IN     std_logic ;
      F   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT bitmux2
   PORT (
      A      : IN     std_logic ;
      B      : IN     std_logic ;
      Sel    : IN     std_logic ;
      bitout : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT NOT1
   PORT (
      A : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : AND2 USE ENTITY ece411.AND2;
   FOR ALL : AND3Bit USE ENTITY ece411.AND3Bit;
   FOR ALL : AND4 USE ENTITY ece411.AND4;
   FOR ALL : ClockDelay22 USE ENTITY ece411.ClockDelay22;
   FOR ALL : ClockDelay33 USE ENTITY ece411.ClockDelay33;
   FOR ALL : L2AddrSplit USE ENTITY ece411.L2AddrSplit;
   FOR ALL : L2Mux USE ENTITY ece411.L2Mux;
   FOR ALL : L2Mux_128 USE ENTITY ece411.L2Mux_128;
   FOR ALL : L2Mux_16 USE ENTITY ece411.L2Mux_16;
   FOR ALL : L2_LRU USE ENTITY ece411.L2_LRU;
   FOR ALL : L2_Way_8 USE ENTITY ece411.L2_Way_8;
   FOR ALL : NAND2 USE ENTITY ece411.NAND2;
   FOR ALL : NOT1 USE ENTITY mp3lib.NOT1;
   FOR ALL : OR2 USE ENTITY ece411.OR2;
   FOR ALL : OWordMux2 USE ENTITY ece411.OWordMux2;
   FOR ALL : Or8 USE ENTITY ece411.Or8;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : bitmux2 USE ENTITY ece411.bitmux2;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   MResp_H <= Hit_internal;                                      


   -- Instance port mappings.
   U_9 : AND2
      PORT MAP (
         A => WriteCache,
         B => Way0Selected,
         F => F
      );
   U_10 : AND2
      PORT MAP (
         A => WriteCache,
         B => bitout6,
         F => F1
      );
   U_11 : AND2
      PORT MAP (
         A => WriteCache,
         B => bitout,
         F => F2
      );
   U_12 : AND2
      PORT MAP (
         A => WriteCache,
         B => bitout1,
         F => F3
      );
   U_13 : AND2
      PORT MAP (
         A => WriteCache,
         B => bitout2,
         F => F4
      );
   U_14 : AND2
      PORT MAP (
         A => WriteCache,
         B => bitout3,
         F => F5
      );
   U_15 : AND2
      PORT MAP (
         A => WriteCache,
         B => bitout4,
         F => F6
      );
   U_16 : AND2
      PORT MAP (
         A => WriteCache,
         B => bitout5,
         F => F7
      );
   U_26 : AND2
      PORT MAP (
         A => PMReadState,
         B => PMResp_H,
         F => F8
      );
   U_34 : AND2
      PORT MAP (
         A => clkDelay22,
         B => clkDelay33,
         F => WriteWindow
      );
   U_39 : AND2
      PORT MAP (
         A => CacheAccess_internal,
         B => F11,
         F => Miss_internal
      );
   U_44 : AND2
      PORT MAP (
         A => Miss_internal,
         B => Dirty_internal,
         F => toWB
      );
   U_46 : AND2
      PORT MAP (
         A => Miss_internal,
         B => Clean,
         F => toPMRead
      );
   U_36 : AND3Bit
      PORT MAP (
         A      => Miss_internal,
         B      => Dirty_internal,
         C      => F10,
         Output => Output
      );
   U_27 : AND4
      PORT MAP (
         A => CheckHitState,
         B => WriteRequest,
         C => HitUnion,
         D => WriteWindow,
         F => F9
      );
   U_41 : AND4
      PORT MAP (
         A => WriteWindow,
         B => CacheAccess_internal,
         C => HitUnion,
         D => CheckHitState,
         F => Hit_internal
      );
   U_42 : ClockDelay22
      PORT MAP (
         clk        => clk,
         clkDelay22 => clkDelay22
      );
   U_43 : ClockDelay33
      PORT MAP (
         clk        => clk,
         clkDelay33 => clkDelay33
      );
   U_8 : L2AddrSplit
      PORT MAP (
         Address => Address,
         Index   => Index,
         Tag     => Tag
      );
   DirtyMux : L2Mux
      PORT MAP (
         In0    => Dirty0,
         In1    => Dirty1,
         In2    => Dirty2,
         In3    => Dirty3,
         In4    => Dirty4,
         In5    => Dirty5,
         In6    => Dirty6,
         In7    => Dirty7,
         P0     => PickWay0,
         P1     => PickWay1,
         P2     => PickWay2,
         P3     => PickWay3,
         P4     => PickWay4,
         P5     => PickWay5,
         P6     => PickWay6,
         P7     => PickWay7,
         Output => Dirty_internal
      );
   ReadHitDataMux : L2Mux_128
      PORT MAP (
         In0    => LineOut,
         In1    => LineOut1,
         In2    => LineOut2,
         In3    => LineOut3,
         In4    => LineOut4,
         In5    => LineOut5,
         In6    => LineOut6,
         In7    => LineOut7,
         s0     => PickWay0,
         s1     => PickWay1,
         s2     => PickWay2,
         s3     => PickWay3,
         s4     => PickWay4,
         s5     => PickWay5,
         s6     => PickWay6,
         s7     => PickWay7,
         Output => PMWriteData
      );
   U_33 : L2Mux_128
      PORT MAP (
         In0    => LineOut,
         In1    => LineOut1,
         In2    => LineOut2,
         In3    => LineOut3,
         In4    => LineOut4,
         In5    => LineOut5,
         In6    => LineOut6,
         In7    => LineOut7,
         s0     => Hit0,
         s1     => Hit1,
         s2     => hit2,
         s3     => Hit3,
         s4     => Hit4,
         s5     => Hit5,
         s6     => Hit6,
         s7     => Hit7,
         Output => L2ReadData
      );
   U_32 : L2Mux_16
      PORT MAP (
         In0    => StoreAddr,
         In1    => StoreAddr1,
         In2    => StoreAddr2,
         In3    => StoreAddr3,
         In4    => StoreAddr4,
         In5    => StoreAddr5,
         In6    => StoreAddr6,
         In7    => StoreAddr7,
         S0     => PickWay0,
         S1     => PickWay1,
         S2     => PickWay2,
         S3     => PickWay3,
         S4     => PickWay4,
         S5     => PickWay5,
         S6     => PickWay6,
         S7     => PickWay7,
         Output => OriginalAddress
      );
   U_30 : L2_LRU
      PORT MAP (
         Addr_Index => Index,
         Hit0       => Hit0,
         Hit1       => Hit1,
         Hit2       => hit2,
         Hit3       => Hit3,
         Hit4       => Hit4,
         Hit5       => Hit5,
         Hit6       => Hit6,
         Hit7       => Hit7,
         LRUWrite   => Hit_internal,
         RESET_L    => RESET_L,
         PickWay0   => PickWay0,
         PickWay1   => PickWay1,
         PickWay2   => PickWay2,
         PickWay3   => PickWay3,
         PickWay4   => PickWay4,
         PickWay5   => PickWay5,
         PickWay6   => PickWay6,
         PickWay7   => PickWay7
      );
   U_0 : L2_Way_8
      PORT MAP (
         DataIn    => OWORDOUT,
         DataWrite => F,
         Dirtify   => CheckHitState,
         Index     => Index,
         RESET_L   => RESET_L,
         Tag       => Tag,
         Dirty     => Dirty0,
         Hit       => Hit0,
         LineOut   => LineOut,
         StoreAddr => StoreAddr
      );
   U_1 : L2_Way_8
      PORT MAP (
         DataIn    => OWORDOUT,
         DataWrite => F1,
         Dirtify   => CheckHitState,
         Index     => Index,
         RESET_L   => RESET_L,
         Tag       => Tag,
         Dirty     => Dirty1,
         Hit       => Hit1,
         LineOut   => LineOut1,
         StoreAddr => StoreAddr1
      );
   U_2 : L2_Way_8
      PORT MAP (
         DataIn    => OWORDOUT,
         DataWrite => F2,
         Dirtify   => CheckHitState,
         Index     => Index,
         RESET_L   => RESET_L,
         Tag       => Tag,
         Dirty     => Dirty2,
         Hit       => hit2,
         LineOut   => LineOut2,
         StoreAddr => StoreAddr2
      );
   U_3 : L2_Way_8
      PORT MAP (
         DataIn    => OWORDOUT,
         DataWrite => F3,
         Dirtify   => CheckHitState,
         Index     => Index,
         RESET_L   => RESET_L,
         Tag       => Tag,
         Dirty     => Dirty3,
         Hit       => Hit3,
         LineOut   => LineOut3,
         StoreAddr => StoreAddr3
      );
   U_4 : L2_Way_8
      PORT MAP (
         DataIn    => OWORDOUT,
         DataWrite => F4,
         Dirtify   => CheckHitState,
         Index     => Index,
         RESET_L   => RESET_L,
         Tag       => Tag,
         Dirty     => Dirty4,
         Hit       => Hit4,
         LineOut   => LineOut4,
         StoreAddr => StoreAddr4
      );
   U_5 : L2_Way_8
      PORT MAP (
         DataIn    => OWORDOUT,
         DataWrite => F5,
         Dirtify   => CheckHitState,
         Index     => Index,
         RESET_L   => RESET_L,
         Tag       => Tag,
         Dirty     => Dirty5,
         Hit       => Hit5,
         LineOut   => LineOut5,
         StoreAddr => StoreAddr5
      );
   U_6 : L2_Way_8
      PORT MAP (
         DataIn    => OWORDOUT,
         DataWrite => F6,
         Dirtify   => CheckHitState,
         Index     => Index,
         RESET_L   => RESET_L,
         Tag       => Tag,
         Dirty     => Dirty6,
         Hit       => Hit6,
         LineOut   => LineOut6,
         StoreAddr => StoreAddr6
      );
   U_7 : L2_Way_8
      PORT MAP (
         DataIn    => OWORDOUT,
         DataWrite => F7,
         Dirtify   => CheckHitState,
         Index     => Index,
         RESET_L   => RESET_L,
         Tag       => Tag,
         Dirty     => Dirty7,
         Hit       => Hit7,
         LineOut   => LineOut7,
         StoreAddr => StoreAddr7
      );
   U_38 : NAND2
      PORT MAP (
         A => MRead_L,
         B => MWrite_L,
         F => CacheAccess_internal
      );
   U_28 : OR2
      PORT MAP (
         A => F8,
         B => F9,
         F => WriteCache
      );
   U_25 : OWordMux2
      PORT MAP (
         A        => PMReadData,
         B        => L2WriteData,
         SEL      => CheckHitState,
         OWORDOUT => OWORDOUT
      );
   U_31 : Or8
      PORT MAP (
         In0 => Hit0,
         In1 => Hit1,
         In2 => hit2,
         In3 => Hit3,
         In4 => Hit4,
         In5 => Hit5,
         In6 => Hit6,
         In7 => Hit7,
         F   => HitUnion
      );
   U_35 : WordMux2
      PORT MAP (
         A   => Address,
         B   => OriginalAddress,
         Sel => Output,
         F   => PMAddress
      );
   U_17 : bitmux2
      PORT MAP (
         A      => PickWay0,
         B      => Hit0,
         Sel    => CheckHitState,
         bitout => Way0Selected
      );
   U_18 : bitmux2
      PORT MAP (
         A      => PickWay1,
         B      => Hit1,
         Sel    => CheckHitState,
         bitout => bitout6
      );
   U_19 : bitmux2
      PORT MAP (
         A      => PickWay2,
         B      => hit2,
         Sel    => CheckHitState,
         bitout => bitout
      );
   U_20 : bitmux2
      PORT MAP (
         A      => PickWay3,
         B      => Hit3,
         Sel    => CheckHitState,
         bitout => bitout1
      );
   U_21 : bitmux2
      PORT MAP (
         A      => PickWay4,
         B      => Hit4,
         Sel    => CheckHitState,
         bitout => bitout2
      );
   U_22 : bitmux2
      PORT MAP (
         A      => PickWay5,
         B      => Hit5,
         Sel    => CheckHitState,
         bitout => bitout3
      );
   U_23 : bitmux2
      PORT MAP (
         A      => PickWay6,
         B      => Hit6,
         Sel    => CheckHitState,
         bitout => bitout4
      );
   U_24 : bitmux2
      PORT MAP (
         A      => PickWay7,
         B      => Hit7,
         Sel    => CheckHitState,
         bitout => bitout5
      );
   U_29 : NOT1
      PORT MAP (
         A => MWrite_L,
         F => WriteRequest
      );
   U_37 : NOT1
      PORT MAP (
         A => PMResp_H,
         F => F10
      );
   U_40 : NOT1
      PORT MAP (
         A => HitUnion,
         F => F11
      );
   U_45 : NOT1
      PORT MAP (
         A => Dirty_internal,
         F => Clean
      );

   -- Implicit buffered output assignments
   CacheAccess <= CacheAccess_internal;
   Dirty       <= Dirty_internal;
   Hit         <= Hit_internal;
   Miss        <= Miss_internal;

END struct;

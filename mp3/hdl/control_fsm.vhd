-- VHDL Entity ece411.Control.interface
--
-- Created:
--          by - freed2.ews (gelib-057-05.ews.illinois.edu)
--          at - 17:37:05 02/28/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Control IS
   PORT( 
      BIT0           : IN     std_logic;
      CheckN         : IN     std_logic;
      CheckP         : IN     std_logic;
      CheckZ         : IN     std_logic;
      MRESP_H        : IN     std_logic;
      Opcode         : IN     LC3B_OPCODE;
      RESET_L        : IN     std_logic;
      START_H        : IN     std_logic;
      clk            : IN     std_logic;
      n              : IN     std_logic;
      p              : IN     std_logic;
      z              : IN     std_logic;
      ADJ6MuxSel     : OUT    std_logic;
      ALUMuxSel      : OUT    std_logic;
      ALUop          : OUT    LC3b_aluop;
      ANDMuxSel      : OUT    std_logic;
      BusMuxSel      : OUT    std_logic;
      DestMuxSel     : OUT    std_logic;
      IndirectMuxSel : OUT    std_logic;
      JMPMuxSel      : OUT    std_logic;
      LEAMuxSel      : OUT    std_logic;
      LoadIR         : OUT    std_logic;
      LoadMAR        : OUT    std_logic;
      LoadMDR        : OUT    std_logic;
      LoadNZP        : OUT    std_logic;
      LoadPC         : OUT    std_logic;
      MARMuxSel      : OUT    std_logic;
      MDRMuxSel      : OUT    std_logic;
      MREAD_L        : OUT    std_logic;
      MWRITEH_L      : OUT    std_logic;
      MWRITEL_L      : OUT    std_logic;
      PCMuxSel       : OUT    LC3B_4MUX_SEL;
      PCStoreMuxSel  : OUT    std_logic;
      RFMuxSel       : OUT    LC3B_4MUX_SEL;
      RegWrite       : OUT    std_logic;
      STBMuxSel      : OUT    std_logic;
      StoreSR        : OUT    std_logic;
      TRAPMuxSel     : OUT    std_logic;
      adj11sel       : OUT    std_logic
   );

-- Declarations

END Control ;

--
-- VHDL Architecture ece411.Control.fsm
--
-- Created:
--          by - freed2.ews (gelib-057-05.ews.illinois.edu)
--          at - 17:37:05 02/28/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF Control IS

   TYPE STATE_TYPE IS (
      Reset,
      Decode,
      L_NOT,
      ADD,
      L_AND,
      BR1,
      BR2,
      IF1,
      IF2,
      IF3,
      CalcADDR,
      ST1,
      ST2,
      LD1,
      LD2,
      LEA,
      JMP,
      JSR,
      SHF,
      LDB,
      STBODD,
      LDI1,
      LDI2,
      STI1,
      STI2,
      TRAP1,
      TRAP2,
      toPC,
      TRAP3,
      LDBCALCADDR,
      STBEVEN,
      STBAdj
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      RESET_L
   )
   -----------------------------------------------------------------
   BEGIN
      IF (RESET_L = '0') THEN
         current_state <= Reset;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      BIT0,
      CheckN,
      CheckP,
      CheckZ,
      MRESP_H,
      Opcode,
      START_H,
      current_state,
      n,
      p,
      z
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN Reset => 
            IF (START_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= Reset;
            END IF;
         WHEN Decode => 
            IF (Opcode = op_br) THEN 
               next_state <= BR1;
            ELSIF (((Opcode = op_ldr) OR (Opcode = op_str) OR (Opcode = op_ldi)OR (Opcode = op_sti) OR (Opcode = op_ldb) OR (Opcode = op_stb)) AND ((Opcode = op_ldb) OR (Opcode = op_stb))) THEN 
               next_state <= LDBCALCADDR;
            ELSIF ((Opcode = op_ldr) OR (Opcode = op_str) OR (Opcode = op_ldi)OR (Opcode = op_sti) OR (Opcode = op_ldb) OR (Opcode = op_stb)) THEN 
               next_state <= CalcADDR;
            ELSIF (Opcode = op_not) THEN 
               next_state <= L_NOT;
            ELSIF (Opcode = op_and) THEN 
               next_state <= L_AND;
            ELSIF (Opcode = op_add) THEN 
               next_state <= ADD;
            ELSIF ((Opcode = op_jmp) OR (Opcode = op_ret)) THEN 
               next_state <= JMP;
            ELSIF (Opcode = op_lea) THEN 
               next_state <= LEA;
            ELSIF (Opcode = op_jsr) THEN 
               next_state <= JSR;
            ELSIF (Opcode = op_shf) THEN 
               next_state <= SHF;
            ELSIF (Opcode = op_trap) THEN 
               next_state <= TRAP1;
            ELSE
               next_state <= IF1;
            END IF;
         WHEN L_NOT => 
            next_state <= IF1;
         WHEN ADD => 
            next_state <= IF1;
         WHEN L_AND => 
            next_state <= IF1;
         WHEN BR1 => 
            IF (( ( n AND CheckN ) OR ( p AND CheckP ) OR (z AND CheckZ ) ) = '1') THEN 
               next_state <= BR2;
            ELSE
               next_state <= IF1;
            END IF;
         WHEN BR2 => 
            next_state <= IF1;
         WHEN IF1 => 
            next_state <= IF2;
         WHEN IF2 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF3;
            ELSE
               next_state <= IF2;
            END IF;
         WHEN IF3 => 
            next_state <= Decode;
         WHEN CalcADDR => 
            IF ((Opcode = op_str)) THEN 
               next_state <= ST1;
            ELSIF ((Opcode = op_ldr) OR (Opcode = op_ldb) OR (Opcode = op_ldi)) THEN 
               next_state <= LD1;
            ELSIF (Opcode = op_sti) THEN 
               next_state <= STI1;
            ELSE
               next_state <= CalcADDR;
            END IF;
         WHEN ST1 => 
            next_state <= ST2;
         WHEN ST2 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= ST2;
            END IF;
         WHEN LD1 => 
            IF ((MRESP_H = '1') AND (Opcode = op_ldr)) THEN 
               next_state <= LD2;
            ELSIF ((MRESP_H = '1') AND (Opcode = op_ldb)) THEN 
               next_state <= LDB;
            ELSIF ((MRESP_H = '1') AND (Opcode = op_ldi)) THEN 
               next_state <= LDI1;
            ELSE
               next_state <= LD1;
            END IF;
         WHEN LD2 => 
            next_state <= IF1;
         WHEN LEA => 
            next_state <= IF1;
         WHEN JMP => 
            next_state <= IF1;
         WHEN JSR => 
            next_state <= IF1;
         WHEN SHF => 
            next_state <= IF1;
         WHEN LDB => 
            next_state <= IF1;
         WHEN STBODD => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= STBODD;
            END IF;
         WHEN LDI1 => 
            next_state <= LDI2;
         WHEN LDI2 => 
            IF (MRESP_H = '1') THEN 
               next_state <= LD2;
            ELSE
               next_state <= LDI2;
            END IF;
         WHEN STI1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= STI2;
            ELSE
               next_state <= STI1;
            END IF;
         WHEN STI2 => 
            next_state <= ST1;
         WHEN TRAP1 => 
            next_state <= TRAP2;
         WHEN TRAP2 => 
            next_state <= TRAP3;
         WHEN toPC => 
            next_state <= IF1;
         WHEN TRAP3 => 
            IF (MRESP_H = '1') THEN 
               next_state <= toPC;
            ELSE
               next_state <= TRAP3;
            END IF;
         WHEN LDBCALCADDR => 
            IF (Opcode = op_ldb) THEN 
               next_state <= LD1;
            ELSIF (Opcode = op_stb) THEN 
               next_state <= STBAdj;
            ELSE
               next_state <= LDBCALCADDR;
            END IF;
         WHEN STBEVEN => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= STBEVEN;
            END IF;
         WHEN STBAdj => 
            IF ((Opcode = op_stb) AND (BIT0 = '1')) THEN 
               next_state <= STBODD;
            ELSIF ((Opcode = op_stb) AND (BIT0 = '0')) THEN 
               next_state <= STBEVEN;
            ELSE
               next_state <= STBAdj;
            END IF;
         WHEN OTHERS =>
            next_state <= Reset;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      ADJ6MuxSel <= '0';
      ALUMuxSel <= '0';
      ALUop <= "000";
      ANDMuxSel <= '0';
      BusMuxSel <= '1';
      DestMuxSel <= '0';
      IndirectMuxSel <= '0';
      JMPMuxSel <= '0';
      LEAMuxSel <= '0';
      LoadIR <= '0';
      LoadMAR <= '0';
      LoadMDR <= '0';
      LoadNZP <= '0';
      LoadPC <= '0';
      MARMuxSel <= '0';
      MDRMuxSel <= '0';
      MREAD_L <= '1';
      MWRITEH_L <= '1';
      MWRITEL_L <= '1';
      PCMuxSel <= "00";
      PCStoreMuxSel <= '0';
      RFMuxSel <= "00";
      RegWrite <= '0';
      STBMuxSel <= '0';
      StoreSR <= '1';
      TRAPMuxSel <= '0';
      adj11sel <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN L_NOT => 
            ALUop <= alu_not;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= "01";
         WHEN ADD => 
            ALUop <= alu_add;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= "01";
            ANDMuxSel <='1';
         WHEN L_AND => 
            ALUop <= alu_and;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <="01";
            ANDMuxSel <= '1';
         WHEN BR2 => 
            PCMuxSel <= "01"; 
            LoadPC <= '1';
         WHEN IF1 => 
            LoadMAR <= '1';
            LoadPC <= '1';
         WHEN IF2 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6 ns;
         WHEN IF3 => 
            LoadIR <= '1';
         WHEN CalcADDR => 
            ALUMuxSel <= '1';
            ALUop <= alu_add;
            MARMuxSel <= '1';
            LoadMAR <= '1';
         WHEN ST1 => 
            StoreSR <= '0';
            ALUop <= alu_pass;
            LoadMDR <= '1';
            MDRMuxSel <='1';
         WHEN ST2 => 
            MWRITEL_L <= '0' after 6ns;
            MWRITEH_L <= '0' after 6ns;
         WHEN LD1 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN LD2 => 
            RegWrite <= '1';
            LoadNZP <= '1';
         WHEN LEA => 
            LEAMuxSel <= '1';
            RegWrite <= '1';
            LoadNZP <= '1';
         WHEN JMP => 
            JMPMuxSel <= '1';
            StoreSR <= '1';
            ALUop <= alu_pass;
            PCMuxSel <= "00";
            LoadPC <= '1';
         WHEN JSR => 
            destmuxsel <= '1';
            pcstoremuxsel <= '1';
            regwrite <= '1';
            adj11sel <= '1';
            alumuxsel <='0';
            aluop <= alu_pass;
            jmpmuxsel <= '1';
            pcmuxsel <= "00";
            loadpc <= '1';
         WHEN SHF => 
            BusMuxSel <= '0';
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= "01";
         WHEN LDB => 
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= "10";
         WHEN STBODD => 
            MWRITEH_L <= '0' after 6ns;
         WHEN LDI1 => 
            IndirectMuxSel <= '1';
            LoadMAR <= '1';
         WHEN LDI2 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6 ns;
         WHEN STI1 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN STI2 => 
            IndirectMuxSel <= '1';
            LoadMAR <= '1';
         WHEN TRAP1 => 
            PCStoreMuxSel <= '1';
            RegWrite <= '1';
            DestMuxSel <= '1';
         WHEN TRAP2 => 
            TRAPMuxSel <= '1';
            LoadMAR <= '1';
         WHEN toPC => 
            PCMUXSEL <= "10";
            LoadPC <= '1';
         WHEN TRAP3 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6 ns;
         WHEN LDBCALCADDR => 
            ALUMuxSel <= '1';
            ALUop <= alu_add;
            MARMuxSel <= '1';
            LoadMAR <= '1';
            ADJ6MuxSel <= '1';
         WHEN STBEVEN => 
            MWRITEL_L <= '0' after 6ns;
         WHEN STBAdj => 
            StoreSR <= '0';
            ALUop <= alu_pass;
            LoadMDR <= '1';
            MDRMuxSel <='1';
            STBMuxSel <= '1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;

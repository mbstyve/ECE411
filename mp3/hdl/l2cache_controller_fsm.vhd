-- VHDL Entity ece411.L2Cache_Controller.symbol
--
-- Created:
--          by - draguna1.ews (gelib-057-08.ews.illinois.edu)
--          at - 01:49:15 04/30/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all; 
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY L2Cache_Controller IS
   PORT( 
      CacheAccess    : IN     std_logic;
      Dirty          : IN     std_logic;
      Hit            : IN     std_logic;
      Miss           : IN     std_logic;
      PMResp_H       : IN     std_logic;
      clk            : IN     std_logic;
      rst            : IN     std_logic;
      toPMRead       : IN     std_logic;
      toWB           : IN     std_logic;
      CheckHitState  : OUT    std_logic;
      PMReadState    : OUT    std_logic;
      PMRead_L       : OUT    std_logic;
      PMWrite_L      : OUT    std_logic;
      WaitHitState   : OUT    std_logic;
      WriteBackState : OUT    std_logic
   );

-- Declarations

END L2Cache_Controller ;

--
-- VHDL Architecture ece411.L2Cache_Controller.fsm
--
-- Created:
--          by - draguna1.ews (gelib-057-08.ews.illinois.edu)
--          at - 01:49:15 04/30/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all; 
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF L2Cache_Controller IS

   TYPE STATE_TYPE IS (
      CheckHit,
      WaitHit,
      ReadDelay,
      WriteBack,
      PMRead
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst = '0') THEN
         current_state <= CheckHit;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      CacheAccess,
      PMResp_H,
      current_state,
      toPMRead,
      toWB
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN CheckHit => 
            IF (toPMRead = '1') THEN 
               next_state <= PMRead;
            ELSIF (toWB = '1') THEN 
               next_state <= WriteBack;
            ELSE
               next_state <= WaitHit;
            END IF;
         WHEN WaitHit => 
            IF (CacheAccess = '1') THEN 
               next_state <= CheckHit;
            ELSE
               next_state <= WaitHit;
            END IF;
         WHEN ReadDelay => 
            next_state <= WaitHit;
         WHEN WriteBack => 
            IF (PMResp_H = '1') THEN 
               next_state <= PMRead;
            ELSE
               next_state <= WriteBack;
            END IF;
         WHEN PMRead => 
            IF (PMResp_H = '1') THEN 
               next_state <= ReadDelay;
            ELSE
               next_state <= PMRead;
            END IF;
         WHEN OTHERS =>
            next_state <= CheckHit;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN

      -- Combined Actions
      CASE current_state IS
         WHEN CheckHit => 
            CheckHitState <= '1';
         WHEN WaitHit => 
            WaitHitState <= '1';
         WHEN WriteBack => 
            PMWrite_L <= '0';
            WriteBackState <= '1';
         WHEN PMRead => 
            PMRead_L <= '0';
            PMReadState <= '1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
